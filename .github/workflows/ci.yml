# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" , "release**"]
  pull_request:
    branches: [ "main", "release**" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "update cloud"
  update-cloud:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      #Push a HTTP request for new firmware binaries (artifact) generated
      - name: Token request to QA API
        id: tokenRequest
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api-auth.qa.switchee.co/oauth2/token'
          method: 'POST'
          customHeaders: '{"Content-Type": "application/x-www-form-urlencoded", "Authorization": "Basic M2wwaWJsMDhlZ3FlZHFrOTZ2b2VsZms3Nmc6N2o2b3QyamMwdHBnbTVuamwxN2gwZTlqcnFlY3BkYmoyMm1lNWpzb2ptYXE1ZnMxMXBz"}'
          data: '{"grant_type" : "client_credentials", "scope" : "https://api.qa.switchee.co/api.client"}'
      - name: Response from request
        run: |
          echo ${{ fromJson(steps.tokenRequest.outputs.response).access_token }}
          echo "ACCESS_TOKEN=${{ fromJson(steps.tokenRequest.outputs.response).access_token }}" >> $GITHUB_ENV
      - name: Post firmware name to QA API
        id: updateFirmwareRequest
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api.qa.switchee.co/v2.0/properties'
          method: 'GET'
          customHeaders: '{"Content-Type": "application/json", "Authorization": "Bearer ${{ env.ACCESS_TOKEN }}", "x-api-key":"G0zz1oWEgBjHI1jw4qhp33ffuxcM1vF7ugDpSHu4"}'
      - name: Response from request
        run: |
          echo ${{steps.updateFirmwareRequest.outputs }}     
          echo ${{ fromJson(steps.updateFirmwareRequest.outputs.response) }}        
          
  
        
