# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" , "release**"]
  pull_request:
    branches: [ "main", "release**" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "update"
  update:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ test-pi ] # Replace with your runner names

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout to branch
        uses: actions/checkout@v3

      - name: ssh-agent-submodule-fix
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.TEST_TMP }}

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        id: myRequest
        run: |
              cd ~/Documents/github_test/_work/test/test
              git submodule update --init --recursive
              git pull
              node index.js
      #Push a HTTP request for new firmware binaries (artifact) generated
      - name: HTTP request to QA API
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api-auth.qa.switchee.co/oauth2/token'
          method: 'POST'
          contentType: 'application/x-www-form-urlencoded'
          customHeaders: '{"Content-Type": "application/json", "authorization": "Basic M2wwaWJsMDhlZ3FlZHFrOTZ2b2VsZms3Nmc6N2o2b3QyamMwdHBnbTVuamwxN2gwZTlqcnFlY3BkYmoyMm1lNWpzb2ptYXE1ZnMxMXBz"}'
          data: '{"grant_type" : "client_credentials", "scope" = "https://api.qa.switchee.co/api.client"}'
          #username: ${{ secrets.AWX_USER }}
          #password: ${{ secrets.AWX_PASSWORD }}
          #customHeaders: '{"Content-Type": "application/json"}'
          #data: '{"key_1": "value_1", "key_2": "value_2"}'
      - name: Response from request
        run: |
          echo ${{ steps.myRequest.outputs.response }}
          echo ${{ steps.myRequest.outputs.headers }}
          echo ${{ fromJson(steps.myRequest.outputs.response).field_you_want_to_access }}
        
          
  
        
